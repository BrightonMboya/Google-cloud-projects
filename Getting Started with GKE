In this lab, you create a Google Kubernetes Engine cluster containing several containers,
each containing a web server. You place a load balancer in front of the cluster and view its contents.

Task 1:
 1.Sign in to the Google Cloud Platform (GCP) Console
 2.Activate cloud shell

 Task 2:
 1.Confirm that needed APIs are enabled
   -Enter the following command
    $ gcloud service-management list  --available --page-size=10 --sort-by="NAME"

Task 3:
 1.start a Kubernetes Engine cluster
 For convenience, place the zone that Qwiklabs assigned you to into an environment variable called MY_ZONE.
   enter the following command
      export MY_ZONE=us-central1-a

  2. Start a Kubernetes cluster managed by Kubernetes Engine.
  Name the cluster webfrontend and configure it to run 2 nodes:
     gcloud container clusters create webfrontend --zone $MY_ZONE --num-nodes 2

 3. After the cluster is created, check your installed version of Kubernetes using the kubectl version command:
     kubectl version

 The gcloud container clusters create command automatically authenticated kubectl for you.


Task 4: Run and deploy a container
  1.launch a single instance of the nginx container. (Nginx is a popular web server.)
    kubectl create deploy nginx --image=nginx:1.17.10
         In Kubernetes, all containers run in pods. This use of the kubectl create command caused Kubernetes to create
         a deployment consisting of a single pod containing the nginx container.
         A Kubernetes deployment keeps a given number of pods up and running even in the event of failures among
         the nodes on which they run. In this command, you launched the default number of pods, which is 1.

         Note: If you see any deprecation warning about future version,
          you can simply ignore it for now and can proceed further.


  2. View the pod running the nginx container:
     kubectl get pods

  3.Expose the nginx container to the Internet:
       kubectl expose deployment nginx --port 80 --type LoadBalancer
          Kubernetes created a service and an external load balancer with a public IP address attached to it.
          The IP address remains the same for the life of the service.
          Any network traffic to that public IP address is routed to pods behind the service:
          in this case, the nginx pod.

  4.View the new service
     kubectl get services
          You can use the displayed external IP address to test and contact the nginx container remotely.
          It may take a few seconds before the External-IP field is populated for your service.
          This is normal. Just re-run the kubectl get services command every few seconds until the field is populated.

  5.Open a new web browser tab and paste your cluster's external IP address into the address bar.
  The default home page of the Nginx browser is displayed.

  6. Scale up the number of pods running on your service:
     kubectl scale deployment nginx --replicas 3

  7. Confirm that Kubernetes has updated the number of pods:
     kubectl get pods

  8. Confirm that your external IP address has not changed:
     kubectl get services

  9. Return to the web browser tab in which you viewed your cluster's external IP address.
     Refresh the page to confirm that the nginx web server is still responding.

     End of the lab